package Main;

import java.time.LocalDate;
import java.util.InputMismatchException;
import java.util.List;
import java.util.Scanner;

import dao.AdoptionEventDAO;
import entity.CashDonation;
import entity.Cat;
import entity.Dog;
import entity.HumanParticipant;
import entity.IAdoptable;
import entity.ItemDonation;
import entity.PetShelter;
import exception.InsufficientFundsException;
import exception.InvalidPetAgeException;
import exception.InvalidPetDataException;
import util.LoggerUtil;

public class MainModule {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        PetShelter shelter = new PetShelter();

        System.out.println(" Welcome to Kiki's PetPals - The #1 Pet Adoption Platform ");

        boolean exit = false;

        while (!exit) {
            printMenu();

            int choice;
            try {
                choice = scanner.nextInt();
                scanner.nextLine(); // consume newline
            } catch (InputMismatchException e) {
                System.out.println("‚ùå Invalid input. Please enter a number between 1 and 7.");
                scanner.nextLine();
                continue;
            }

            switch (choice) {
                case 1 -> addPet(scanner, shelter);
                case 2 -> listPets(shelter);
                case 3 -> shelter.adopt();
                case 4 -> makeCashDonation(scanner);
                case 5 -> makeItemDonation(scanner);
                
                case 6 -> {
                    System.out.println("üôè Thank you for visiting Kiki's PetPals!");
                    exit = true;
                }
                default -> System.out.println("‚ùå Invalid choice. Please select between 1 and 7.");
            }
        }

        scanner.close();
    }

    private static void printMenu() {
        System.out.println("\n========= MAIN MENU =========");
        System.out.println("1. Add Pet");
        System.out.println("2. List Available Pets");
        System.out.println("3. Adopt a Pet");
        System.out.println("4. Make a Cash Donation");
        System.out.println("5. Make an Item Donation");
       
        System.out.println("6. Exit");
        System.out.print("Enter your choice (1-6): ");
    }

    private static void addPet(Scanner scanner, PetShelter shelter) {
        System.out.print("Enter pet type (dog/cat): ");
        String type = scanner.nextLine().trim().toLowerCase();

        String name;
        while (true) {
            try {
                System.out.print("Enter pet name: ");
                name = scanner.nextLine().trim();
                if (name.isEmpty()) throw new InvalidPetDataException("‚ùå Pet name cannot be empty.");
                break;
            } catch (InvalidPetDataException e) {
                System.out.println(e.getMessage());
            }
        }

        int age;
        while (true) {
            try {
                System.out.print("Enter pet age (positive number): ");
                age = Integer.parseInt(scanner.nextLine().trim());
                if (age <= 0) throw new InvalidPetAgeException("‚ùå Age must be a positive number.");
                break;
            } catch (NumberFormatException e) {
                System.out.println("‚ùå Please enter a valid number.");
            } catch (InvalidPetAgeException e) {
                System.out.println(e.getMessage());
            }
        }

        String breed;
        while (true) {
            try {
                System.out.print("Enter breed: ");
                breed = scanner.nextLine().trim();
                if (breed.isEmpty()) throw new InvalidPetDataException("‚ùå Breed cannot be empty.");
                break;
            } catch (InvalidPetDataException e) {
                System.out.println(e.getMessage());
            }
        }

        if (type.equals("dog")) {
            System.out.print("Enter specific dog breed: ");
            String dogBreed = scanner.nextLine();
            Dog dog = new Dog(0, name, age, breed, dogBreed);
            shelter.addPet(dog);

        } else if (type.equals("cat")) {
            System.out.print("Enter cat color: ");
            String catColor = scanner.nextLine();
            Cat cat = new Cat(0, name, age, breed, catColor);
            shelter.addPet(cat);

        } else {
            System.out.println(" Invalid pet type entered.");
            return;
        }

        System.out.println("‚úÖ Pet added successfully!");
    }

    private static void listPets(PetShelter shelter) {
        System.out.println("\nüìã Available Pets:");
        shelter.listAvailablePets();
    }

    private static void makeCashDonation(Scanner scanner) {
        System.out.print("Enter donor name: ");
        String donorName = scanner.nextLine();

        System.out.print("Enter donation amount (‚Çπ): ");
        double amount = Double.parseDouble(scanner.nextLine());

        if (amount <= 0) {
            System.out.println("‚ùå Donation amount must be greater than zero.");
            return;
        }

        try {
            CashDonation donation = new CashDonation(donorName, amount, LocalDate.now());
            donation.recordDonation();
            LoggerUtil.logDonation(donorName, amount);
            System.out.println("‚úÖ Cash donation recorded successfully!");
        } catch (InsufficientFundsException e) {
            System.out.println(e.getMessage());
        }
    }

    private static void makeItemDonation(Scanner scanner) {
        System.out.print("Enter donor name: ");
        String donorName = scanner.nextLine();

        System.out.print("Enter item donated: ");
        String item = scanner.nextLine();

        if (item.trim().isEmpty()) {
            System.out.println("‚ùå Item name cannot be empty.");
            return;
        }

        ItemDonation donation = new ItemDonation(donorName, 0, item);
        donation.recordDonation();
        System.out.println("‚úÖ Item donation recorded successfully!");
    }

    
    
}
