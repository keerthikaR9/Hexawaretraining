package com.gadgets;

import java.util.Date;

import com.gadgets.exception.InvalidInputException;
import com.gadgets.exception.OrderProcessingException;

public class Main {
    public static void main(String[] args) {
        try {
            // Creating a customer
            Customer customer1 = new Customer(15, "Praveen", "Kumar", "praveen25@gmail.com", "9874563213", "Kalpakkam, Chennai");

            // Displaying customer details
            System.out.println("===== Customer Details =====");
            customer1.getCustomerDetails();

            // Creating products
            Product product1 = new Product(201, "Smartphone", "Android phone with 8GB RAM", 500.00, 10);
            Product product2 = new Product(202, "Laptop", "Gaming laptop with RTX 3060", 1200.00, 5);

            // Displaying product details
            System.out.println("\n===== Product Details =====");
            System.out.println(product1.getProductDetails());
            System.out.println(product2.getProductDetails());

            // Creating inventory
            Inventory inventory1 = new Inventory(301, product1, 10);
            Inventory inventory2 = new Inventory(302, product2, 5);

            System.out.println("\n===== Inventory Details =====");
            inventory1.displayInventoryDetails();
            inventory2.displayInventoryDetails();

            // Creating an order
            Order order1 = new Order(401, customer1, new Date(), 0.00);

            // Creating order detail 1
            try {
                if (inventory1.isProductAvailable(2)) {
                    OrderDetail orderDetail1 = new OrderDetail(501, order1, product1, 2);
                    inventory1.removeFromInventory(orderDetail1.getQuantity());
                } else {
                    System.out.println("\n⚠ Not enough stock for " + product1.getProductName());
                }
            } catch (InvalidInputException | OrderProcessingException e) {
                System.out.println(" Failed to add product1 to order: " + e.getMessage());
            }

            // Creating order detail 2
            try {
                if (inventory2.isProductAvailable(1)) {
                    OrderDetail orderDetail2 = new OrderDetail(502, order1, product2, 1);
                    inventory2.removeFromInventory(orderDetail2.getQuantity());
                } else {
                    System.out.println("\n⚠ Not enough stock for " + product2.getProductName());
                }
            } catch (InvalidInputException | OrderProcessingException e) {
                System.out.println(" Failed to add product2 to order: " + e.getMessage());
            }

            // Displaying order details
            System.out.println("\n===== Order Details =====");
            order1.getOrderDetails();
            

            // Updating status
            try {
                order1.updateOrderStatus("Shipped");
                System.out.println("\n Order status updated to 'Shipped'");
                order1.getOrderDetails();
            } catch (InvalidInputException e) {
                System.out.println(" Invalid status update: " + e.getMessage());
            }

            // Displaying final inventory
            System.out.println("\n===== Updated Inventory After Purchase =====");
            inventory1.displayInventoryDetails();
            inventory2.displayInventoryDetails();

        } catch (InvalidInputException e) {
            System.out.println(" Application Error: " + e.getMessage());
        } catch (Exception e) {
            System.out.println(" Unexpected Error: " + e.getMessage());
        }
    }
}
